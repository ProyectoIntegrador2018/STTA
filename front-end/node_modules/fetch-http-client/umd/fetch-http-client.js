(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FetchHttpClient"] = factory();
	else
		root["FetchHttpClient"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.timeout = exports.credentials = exports.userAgent = exports.header = exports.json = exports.form = exports.query = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _queryString = __webpack_require__(1);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FetchHttpClient = function () {
	  function FetchHttpClient(baseUrl) {
	    _classCallCheck(this, FetchHttpClient);

	    this.baseUrl = baseUrl || '';
	    this.middlewareId = 1;
	    this.middlewares = [];
	  }

	  _createClass(FetchHttpClient, [{
	    key: 'addMiddleware',
	    value: function addMiddleware(middleware) {
	      if (!middleware.middlewareId) {
	        middleware.middlewareId = this.middlewareId++;
	      }
	      this.middlewares.push(middleware);

	      return this;
	    }
	  }, {
	    key: 'removeMiddleware',
	    value: function removeMiddleware(middleware) {
	      if (!middleware.middlewareId) {
	        return this;
	      }

	      if (this.middlewares[middleware.middlewareId]) {
	        delete this.middlewares[middleware.middlewareId];
	      }

	      return this;
	    }
	  }, {
	    key: 'fetch',
	    value: function (_fetch) {
	      function fetch(_x) {
	        return _fetch.apply(this, arguments);
	      }

	      fetch.toString = function () {
	        return _fetch.toString();
	      };

	      return fetch;
	    }(function (path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (typeof fetch !== 'function') {
	        throw new TypeError('fetch() function not available');
	      }

	      options = _extends({ headers: {} }, options);

	      var url = this.resolveUrl(path, options.uriParams || {});
	      var responseMiddlewares = [];
	      var requestPromise = this.middlewares.reduce(function (promise, middleware) {
	        return promise.then(function (request) {
	          var result = middleware(request);
	          if (typeof result === 'function') {
	            responseMiddlewares.push(result);
	          }
	          return result && typeof result !== 'function' ? result : request;
	        });
	      }, Promise.resolve({ url: url, path: path, options: options })).then(function (request) {
	        return fetch(request.url, request.options);
	      });

	      return requestPromise.then(function (response) {
	        return responseMiddlewares.reduce(function (promise, middleware) {
	          return promise.then(function (response) {
	            return middleware(response) || response;
	          });
	        }, Promise.resolve(response));
	      });
	    })
	  }, {
	    key: 'request',
	    value: function request(path, method) {
	      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	      return this.fetch(path, _extends({}, options, { method: method }));
	    }
	  }, {
	    key: 'get',
	    value: function get(path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return this.request(path, 'GET', options);
	    }
	  }, {
	    key: 'post',
	    value: function post(path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return this.request(path, 'POST', options);
	    }
	  }, {
	    key: 'put',
	    value: function put(path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return this.request(path, 'PUT', options);
	    }
	  }, {
	    key: 'delete',
	    value: function _delete(path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return this.request(path, 'DELETE', options);
	    }
	  }, {
	    key: 'patch',
	    value: function patch(path) {
	      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return this.request(path, 'PATCH', options);
	    }
	  }, {
	    key: 'resolveUrl',
	    value: function resolveUrl(path) {
	      var variables = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (path.toLowerCase().startsWith('http://') || path.toLowerCase().startsWith('https://') || path.startsWith('//')) {
	        return path;
	      }

	      var baseUrl = this.baseUrl.replace(/\/+$/g, '');
	      var fullUrl = '';

	      if (path.startsWith('/')) {
	        var rootPos = baseUrl.indexOf('/', baseUrl.indexOf('//') + 2);
	        fullUrl = baseUrl.substr(0, rootPos === -1 ? undefined : rootPos) + path;
	      } else {
	        fullUrl = baseUrl + '/' + path;
	      }

	      fullUrl = fullUrl.replace(/\{(\w+)\}/ig, function (match, group) {
	        if (!variables[group]) throw new Error('Unknown path variable \'' + group + '\'.');
	        return encodeURIComponent(variables[group]);
	      });

	      return fullUrl;
	    }
	  }]);

	  return FetchHttpClient;
	}();

	exports.default = FetchHttpClient;
	var query = exports.query = function query() {
	  return function (request) {
	    if (request.options.query) {
	      var queryString = (0, _queryString.stringify)(request.options.query);
	      if (request.url.indexOf('?') === -1) {
	        request.url = request.url.concat('?');
	      }
	      if (request.url.endsWith('&') || request.url.endsWith('?')) {
	        request.url = request.url.concat(queryString);
	      } else {
	        request.url = request.url.concat('&', queryString);
	      }
	    }
	  };
	};

	var form = exports.form = function form() {
	  return function (request) {
	    if (request.options.form) {
	      request.options.body = (0, _queryString.stringify)(request.options.form);
	      request.options.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
	    }
	  };
	};

	var json = exports.json = function json() {
	  return function (request) {
	    if (request.options.json) {
	      request.options.body = JSON.stringify(request.options.json);
	      request.options.headers['Content-Type'] = 'application/json';
	    }
	    request.options.headers.Accept = 'application/json';

	    return function (response) {
	      var contentType = response.headers.get('Content-Type') || '';
	      if (contentType.indexOf('json') === -1) return response;
	      return response.json().then(function (json) {
	        return response.jsonData = json, response;
	      });
	    };
	  };
	};

	var header = exports.header = function header(headers) {
	  return function (request) {
	    request.options.headers = _extends({}, request.options.headers, headers);
	  };
	};

	var userAgent = exports.userAgent = function userAgent(ua) {
	  return function (request) {
	    var uaSegments = [];
	    Object.keys(ua).forEach(function (key) {
	      return uaSegments.push(key + '/' + ua[key]);
	    });
	    request.options.headers['User-Agent'] = uaSegments.join(' ');
	  };
	};

	var credentials = exports.credentials = function credentials(_credentials) {
	  return function (request) {
	    request.options.credentials = _credentials;
	  };
	};

	var timeout = exports.timeout = function timeout(s) {
	  return function (request) {
	    if (typeof parseInt(s, 10) !== 'number') throw new TypeError('function params not available');

	    var abort = new Promise(function (resolve, reject) {
	      return setTimeout(reject, s, 'request timeout!');
	    });

	    return Promise.race([request, abort]);
	  };
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(2);

	function encode(value, strict) {
		return strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (ret[key] === undefined) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
		});

		return ret;
	};

	exports.stringify = function (obj, opts) {
		opts = opts || {};

		var strict = opts.strict !== false;

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().sort().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					if (val2 === null) {
						result.push(encode(key, strict));
					} else {
						result.push(encode(key, strict) + '=' + encode(val2, strict));
					}
				});

				return result.join('&');
			}

			return encode(key, strict) + '=' + encode(val, strict);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ }
/******/ ])
});
;